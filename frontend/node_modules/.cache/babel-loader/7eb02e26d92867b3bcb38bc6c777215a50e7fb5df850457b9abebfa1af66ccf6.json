{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\Appointment_sheduling\\\\frontend\\\\src\\\\components\\\\Appointment.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay, parseISO, isAfter, startOfDay } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = ({\n  onBookingComplete\n}) => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [availableDates, setAvailableDates] = useState([]);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\n  const [showBookingForm, setShowBookingForm] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const getDaysInMonth = () => {\n    const start = startOfMonth(selectedDate);\n    const end = endOfMonth(selectedDate);\n    return eachDayOfInterval({\n      start,\n      end\n    });\n  };\n  const isDateAvailable = date => {\n    const today = startOfDay(new Date());\n    const availableTimes = getAvailableTimesForDate(date);\n    return (isAfter(startOfDay(date), today) || isSameDay(date, today)) && availableTimes.length > 0;\n  };\n  const getAvailableTimesForDate = date => {\n    if (!date) return [];\n    const dateStr = format(date, 'yyyy-MM-dd');\n    const now = new Date();\n    const currentTime = format(now, 'HH:mm');\n    const isToday = isSameDay(date, now);\n\n    // Filter available slots for the specific date\n    return availableDates.filter(slot => {\n      // Must be for the selected date\n      if (slot.date !== dateStr) return false;\n\n      // Must have remaining capacity\n      if (slot.remainingCapacity <= 0) return false;\n\n      // For today, must be a future time\n      if (isToday && slot.time <= currentTime) return false;\n      return true;\n    }).sort((a, b) => {\n      const timeA = parseISO(`2000-01-01T${a.time}`);\n      const timeB = parseISO(`2000-01-01T${b.time}`);\n      return timeA - timeB;\n    });\n  };\n  const fetchAvailableDates = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:3000/api/available-dates', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Parse and filter out any fully booked slots\n      const parsedSlots = data.filter(slot => slot.remainingCapacity > 0).map(slot => ({\n        ...slot,\n        time: slot.time.substring(0, 5),\n        displayTime: format(parseISO(`2000-01-01T${slot.time}`), 'h:mm a'),\n        remainingCapacity: slot.remainingCapacity\n      }));\n      setAvailableDates(parsedSlots);\n    } catch (error) {\n      console.error('Error fetching dates:', error);\n      setError('Failed to load available dates');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDateClick = date => {\n    if (isDateAvailable(date)) {\n      setSelectedDate(date);\n      setSelectedTimeSlot(null);\n      setShowBookingForm(false);\n    }\n  };\n  const handleTimeSelect = e => {\n    const slotId = e.target.value;\n    if (slotId) {\n      const slot = availableDates.find(slot => slot.id.toString() === slotId.toString() && slot.remainingCapacity > 0);\n      if (slot) {\n        setSelectedTimeSlot(slot);\n        setShowBookingForm(true);\n      }\n    } else {\n      setSelectedTimeSlot(null);\n      setShowBookingForm(false);\n    }\n  };\n  useEffect(() => {\n    fetchAvailableDates();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center justify-center h-64\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-lg text-gray-600\",\n      children: \"Loading calendar...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center p-4 text-red-500 bg-red-50 rounded-lg\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-4xl mx-auto space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-md p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xl font-bold mb-4 text-center\",\n        children: format(selectedDate, 'MMMM yyyy')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-7 gap-2\",\n        children: [['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center font-medium text-gray-600 p-2\",\n          children: day\n        }, day, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)), getDaysInMonth().map(date => {\n          const isAvailable = isDateAvailable(date);\n          const isSelected = isSameDay(date, selectedDate);\n          const isPastDate = !isAvailable;\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDateClick(date),\n            disabled: isPastDate,\n            className: `\n                  h-12 p-2 relative rounded-lg transition-colors\n                  ${isPastDate ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-white hover:bg-blue-50 cursor-pointer'}\n                  ${isSelected ? 'bg-blue-500 text-white hover:bg-blue-600' : ''}\n                  border border-gray-200\n                `,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: format(date, 'd')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this), getAvailableTimesForDate(date).length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"absolute bottom-1 left-1/2 transform -translate-x-1/2\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"block h-1 w-1 rounded-full bg-green-500\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 19\n            }, this)]\n          }, date.toString(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), isDateAvailable(selectedDate) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-6 space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center font-medium\",\n          children: [\"Available times for \", format(selectedDate, 'MMMM d, yyyy'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: (selectedTimeSlot === null || selectedTimeSlot === void 0 ? void 0 : selectedTimeSlot.id) || '',\n          onChange: handleTimeSelect,\n          className: \"w-full p-2 border rounded-md\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this), getAvailableTimesForDate(selectedDate).map(slot => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: slot.id,\n            children: [slot.displayTime, \" (\", slot.remainingCapacity, \" spots left)\"]\n          }, slot.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), showBookingForm && selectedTimeSlot && /*#__PURE__*/_jsxDEV(BookingForm, {\n      selectedDate: selectedDate,\n      selectedTimeSlot: selectedTimeSlot,\n      onBookingComplete: onBookingComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"euT2jZd5laYRxWMAXP8pv5kONRQ=\");\n_c = Calendar;\nconst BookingForm = ({\n  selectedDate,\n  selectedTimeSlot,\n  onBookingComplete\n}) => {\n  _s2();\n  const [formData, setFormData] = useState({\n    name: '',\n    contact: '',\n    notes: ''\n  });\n  const [status, setStatus] = useState({\n    type: '',\n    message: ''\n  });\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setStatus({\n      type: '',\n      message: ''\n    });\n    try {\n      const response = await fetch('http://localhost:3000/api/appointments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          ...formData,\n          date: format(selectedDate, 'yyyy-MM-dd'),\n          timeSlot: selectedTimeSlot.id\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setStatus({\n          type: 'success',\n          message: 'Appointment booked successfully!'\n        });\n        setTimeout(onBookingComplete, 2000);\n      } else {\n        setStatus({\n          type: 'error',\n          message: data.error || 'Booking failed'\n        });\n      }\n    } catch (error) {\n      setStatus({\n        type: 'error',\n        message: 'An error occurred'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white rounded-lg shadow-md p-6\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"space-y-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xl font-bold mb-6\",\n        children: [\"Book Appointment\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm font-normal text-gray-600\",\n          children: [format(selectedDate, 'MMMM d, yyyy'), \" at \", selectedTimeSlot.time]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), status.message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `p-3 rounded-lg ${status.type === 'error' ? 'bg-red-50 text-red-600' : 'bg-green-50 text-green-600'}`,\n        children: status.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-sm font-medium\",\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"w-full p-2 border rounded-md\",\n          value: formData.name,\n          onChange: e => setFormData({\n            ...formData,\n            name: e.target.value\n          }),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-sm font-medium\",\n          children: \"Contact Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"tel\",\n          className: \"w-full p-2 border rounded-md\",\n          value: formData.contact,\n          onChange: e => setFormData({\n            ...formData,\n            contact: e.target.value\n          }),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-sm font-medium\",\n          children: \"Notes (Optional)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"w-full p-2 border rounded-md\",\n          rows: \"3\",\n          value: formData.notes,\n          onChange: e => setFormData({\n            ...formData,\n            notes: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 transition-colors\",\n        children: \"Confirm Booking\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n};\n_s2(BookingForm, \"l2lcTCOuGJMU0DEoPKt97pFBpLo=\");\n_c2 = BookingForm;\nexport { Calendar, BookingForm };\nvar _c, _c2;\n$RefreshReg$(_c, \"Calendar\");\n$RefreshReg$(_c2, \"BookingForm\");","map":{"version":3,"names":["React","useState","useEffect","format","startOfMonth","endOfMonth","eachDayOfInterval","isSameDay","parseISO","isAfter","startOfDay","jsxDEV","_jsxDEV","Calendar","onBookingComplete","_s","selectedDate","setSelectedDate","Date","availableDates","setAvailableDates","selectedTimeSlot","setSelectedTimeSlot","showBookingForm","setShowBookingForm","loading","setLoading","error","setError","getDaysInMonth","start","end","isDateAvailable","date","today","availableTimes","getAvailableTimesForDate","length","dateStr","now","currentTime","isToday","filter","slot","remainingCapacity","time","sort","a","b","timeA","timeB","fetchAvailableDates","token","localStorage","getItem","response","fetch","headers","ok","Error","status","data","json","parsedSlots","map","substring","displayTime","console","handleDateClick","handleTimeSelect","e","slotId","target","value","find","id","toString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","day","isAvailable","isSelected","isPastDate","onClick","disabled","onChange","BookingForm","_c","_s2","formData","setFormData","name","contact","notes","setStatus","type","message","handleSubmit","preventDefault","method","body","JSON","stringify","timeSlot","setTimeout","onSubmit","required","rows","_c2","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/Appointment_sheduling/frontend/src/components/Appointment.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay, parseISO, isAfter, startOfDay } from 'date-fns';\r\n\r\nconst Calendar = ({ onBookingComplete }) => {\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [availableDates, setAvailableDates] = useState([]);\r\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\r\n  const [showBookingForm, setShowBookingForm] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const getDaysInMonth = () => {\r\n    const start = startOfMonth(selectedDate);\r\n    const end = endOfMonth(selectedDate);\r\n    return eachDayOfInterval({ start, end });\r\n  };\r\n\r\n  const isDateAvailable = (date) => {\r\n    const today = startOfDay(new Date());\r\n    const availableTimes = getAvailableTimesForDate(date);\r\n    return (isAfter(startOfDay(date), today) || isSameDay(date, today)) && \r\n           availableTimes.length > 0;\r\n  };\r\n\r\n  const getAvailableTimesForDate = (date) => {\r\n    if (!date) return [];\r\n    \r\n    const dateStr = format(date, 'yyyy-MM-dd');\r\n    const now = new Date();\r\n    const currentTime = format(now, 'HH:mm');\r\n    const isToday = isSameDay(date, now);\r\n    \r\n    // Filter available slots for the specific date\r\n    return availableDates\r\n      .filter(slot => {\r\n        // Must be for the selected date\r\n        if (slot.date !== dateStr) return false;\r\n        \r\n        // Must have remaining capacity\r\n        if (slot.remainingCapacity <= 0) return false;\r\n        \r\n        // For today, must be a future time\r\n        if (isToday && slot.time <= currentTime) return false;\r\n        \r\n        return true;\r\n      })\r\n      .sort((a, b) => {\r\n        const timeA = parseISO(`2000-01-01T${a.time}`);\r\n        const timeB = parseISO(`2000-01-01T${b.time}`);\r\n        return timeA - timeB;\r\n      });\r\n  };\r\n\r\n  const fetchAvailableDates = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const token = localStorage.getItem('token');\r\n      \r\n      const response = await fetch('http://localhost:3000/api/available-dates', {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      // Parse and filter out any fully booked slots\r\n      const parsedSlots = data\r\n        .filter(slot => slot.remainingCapacity > 0)\r\n        .map(slot => ({\r\n          ...slot,\r\n          time: slot.time.substring(0, 5),\r\n          displayTime: format(parseISO(`2000-01-01T${slot.time}`), 'h:mm a'),\r\n          remainingCapacity: slot.remainingCapacity\r\n        }));\r\n      \r\n      setAvailableDates(parsedSlots);\r\n    } catch (error) {\r\n      console.error('Error fetching dates:', error);\r\n      setError('Failed to load available dates');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDateClick = (date) => {\r\n    if (isDateAvailable(date)) {\r\n      setSelectedDate(date);\r\n      setSelectedTimeSlot(null);\r\n      setShowBookingForm(false);\r\n    }\r\n  };\r\n\r\n  const handleTimeSelect = (e) => {\r\n    const slotId = e.target.value;\r\n    \r\n    if (slotId) {\r\n      const slot = availableDates.find(slot => \r\n        slot.id.toString() === slotId.toString() && \r\n        slot.remainingCapacity > 0\r\n      );\r\n      if (slot) {\r\n        setSelectedTimeSlot(slot);\r\n        setShowBookingForm(true);\r\n      }\r\n    } else {\r\n      setSelectedTimeSlot(null);\r\n      setShowBookingForm(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAvailableDates();\r\n  }, []);\r\n\r\n  if (loading) return <div className=\"flex items-center justify-center h-64\">\r\n    <div className=\"text-lg text-gray-600\">Loading calendar...</div>\r\n  </div>;\r\n\r\n  if (error) return <div className=\"text-center p-4 text-red-500 bg-red-50 rounded-lg\">{error}</div>;\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto space-y-6\">\r\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n        <div className=\"text-xl font-bold mb-4 text-center\">\r\n          {format(selectedDate, 'MMMM yyyy')}\r\n        </div>\r\n        \r\n        <div className=\"grid grid-cols-7 gap-2\">\r\n          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\r\n            <div key={day} className=\"text-center font-medium text-gray-600 p-2\">\r\n              {day}\r\n            </div>\r\n          ))}\r\n          \r\n          {getDaysInMonth().map((date) => {\r\n            const isAvailable = isDateAvailable(date);\r\n            const isSelected = isSameDay(date, selectedDate);\r\n            const isPastDate = !isAvailable;\r\n            \r\n            return (\r\n              <button\r\n                key={date.toString()}\r\n                onClick={() => handleDateClick(date)}\r\n                disabled={isPastDate}\r\n                className={`\r\n                  h-12 p-2 relative rounded-lg transition-colors\r\n                  ${isPastDate ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-white hover:bg-blue-50 cursor-pointer'}\r\n                  ${isSelected ? 'bg-blue-500 text-white hover:bg-blue-600' : ''}\r\n                  border border-gray-200\r\n                `}\r\n              >\r\n                <span>{format(date, 'd')}</span>\r\n                {getAvailableTimesForDate(date).length > 0 && (\r\n                  <span className=\"absolute bottom-1 left-1/2 transform -translate-x-1/2\">\r\n                    <span className=\"block h-1 w-1 rounded-full bg-green-500\"/>\r\n                  </span>\r\n                )}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {isDateAvailable(selectedDate) && (\r\n          <div className=\"mt-6 space-y-4\">\r\n            <div className=\"text-center font-medium\">\r\n              Available times for {format(selectedDate, 'MMMM d, yyyy')}:\r\n            </div>\r\n            <select\r\n              value={selectedTimeSlot?.id || ''}\r\n              onChange={handleTimeSelect}\r\n              className=\"w-full p-2 border rounded-md\"\r\n            >\r\n              <option value=\"\">Select a time</option>\r\n              {getAvailableTimesForDate(selectedDate).map((slot) => (\r\n                <option key={slot.id} value={slot.id}>\r\n                  {slot.displayTime} ({slot.remainingCapacity} spots left)\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {showBookingForm && selectedTimeSlot && (\r\n        <BookingForm\r\n          selectedDate={selectedDate}\r\n          selectedTimeSlot={selectedTimeSlot}\r\n          onBookingComplete={onBookingComplete}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst BookingForm = ({ selectedDate, selectedTimeSlot, onBookingComplete }) => {\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    contact: '',\r\n    notes: ''\r\n  });\r\n  const [status, setStatus] = useState({ type: '', message: '' });\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setStatus({ type: '', message: '' });\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:3000/api/appointments', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify({\r\n          ...formData,\r\n          date: format(selectedDate, 'yyyy-MM-dd'),\r\n          timeSlot: selectedTimeSlot.id\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setStatus({ type: 'success', message: 'Appointment booked successfully!' });\r\n        setTimeout(onBookingComplete, 2000);\r\n      } else {\r\n        setStatus({ type: 'error', message: data.error || 'Booking failed' });\r\n      }\r\n    } catch (error) {\r\n      setStatus({ type: 'error', message: 'An error occurred' });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n        <div className=\"text-xl font-bold mb-6\">\r\n          Book Appointment\r\n          <div className=\"text-sm font-normal text-gray-600\">\r\n            {format(selectedDate, 'MMMM d, yyyy')} at {selectedTimeSlot.time}\r\n          </div>\r\n        </div>\r\n\r\n        {status.message && (\r\n          <div className={`p-3 rounded-lg ${\r\n            status.type === 'error' ? 'bg-red-50 text-red-600' : 'bg-green-50 text-green-600'\r\n          }`}>\r\n            {status.message}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"space-y-2\">\r\n          <label className=\"block text-sm font-medium\">Name</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"w-full p-2 border rounded-md\"\r\n            value={formData.name}\r\n            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          <label className=\"block text-sm font-medium\">Contact Number</label>\r\n          <input\r\n            type=\"tel\"\r\n            className=\"w-full p-2 border rounded-md\"\r\n            value={formData.contact}\r\n            onChange={(e) => setFormData({ ...formData, contact: e.target.value })}\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          <label className=\"block text-sm font-medium\">Notes (Optional)</label>\r\n          <textarea\r\n            className=\"w-full p-2 border rounded-md\"\r\n            rows=\"3\"\r\n            value={formData.notes}\r\n            onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\r\n          />\r\n        </div>\r\n\r\n        <button\r\n          type=\"submit\"\r\n          className=\"w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 transition-colors\"\r\n        >\r\n          Confirm Booking\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Calendar, BookingForm };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}