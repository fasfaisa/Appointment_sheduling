{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\Appointment_sheduling\\\\frontend\\\\src\\\\components\\\\Appointment.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay, parseISO, isAfter, startOfDay } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = ({\n  onBookingComplete,\n  onReturnToDashboard\n}) => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [availableDates, setAvailableDates] = useState([]);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\n  const [showBookingForm, setShowBookingForm] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [refreshKey, setRefreshKey] = useState(0);\n  const getDaysInMonth = () => {\n    const start = startOfMonth(selectedDate);\n    const end = endOfMonth(selectedDate);\n    return eachDayOfInterval({\n      start,\n      end\n    });\n  };\n  const isDateAvailable = date => {\n    const today = startOfDay(new Date());\n    const availableTimes = getAvailableTimesForDate(date);\n    return (isAfter(startOfDay(date), today) || isSameDay(date, today)) && availableTimes.length > 0;\n  };\n  const getAvailableTimesForDate = date => {\n    if (!date) return [];\n    const dateStr = format(date, 'yyyy-MM-dd');\n    const now = new Date();\n    const isToday = isSameDay(date, now);\n    return availableDates.filter(slot => {\n      // Must be for the selected date\n      if (slot.date !== dateStr) return false;\n\n      // Remove slots that are already booked (zero remaining capacity)\n      if (slot.remainingCapacity === 0) return false;\n\n      // For today, must be a future time\n      if (isToday) {\n        const slotTime = parseISO(`${dateStr}T${slot.time}`);\n        return isAfter(slotTime, now);\n      }\n      return true;\n    }).sort((a, b) => {\n      const timeA = parseISO(`2000-01-01T${a.time}`);\n      const timeB = parseISO(`2000-01-01T${b.time}`);\n      return timeA - timeB;\n    });\n  };\n  const fetchAvailableDates = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:3000/api/available-dates', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        },\n        cache: 'no-store'\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      const parsedSlots = data.filter(slot => slot.remainingCapacity === 1) // Only slots with exactly 1 capacity\n      .map(slot => ({\n        ...slot,\n        time: slot.time.substring(0, 5),\n        displayTime: format(parseISO(`2000-01-01T${slot.time}`), 'h:mm a')\n      }));\n      setAvailableDates(parsedSlots);\n    } catch (error) {\n      console.error('Error fetching dates:', error);\n      setError('Failed to load available dates');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDateClick = date => {\n    if (isDateAvailable(date)) {\n      setSelectedDate(date);\n      setSelectedTimeSlot(null);\n      setShowBookingForm(false);\n    }\n  };\n  const handleTimeSelect = e => {\n    const slotId = e.target.value;\n    if (slotId) {\n      const slot = availableDates.find(slot => slot.id.toString() === slotId.toString() && slot.remainingCapacity > 0);\n      if (slot) {\n        setSelectedTimeSlot(slot);\n        setShowBookingForm(true);\n      }\n    } else {\n      setSelectedTimeSlot(null);\n      setShowBookingForm(false);\n    }\n  };\n  const handleBookingComplete = async () => {\n    try {\n      // Reset form state\n      setSelectedTimeSlot(null);\n      setShowBookingForm(false);\n\n      // Force a refresh of available dates\n      await fetchAvailableDates();\n\n      // Increment refresh key to force component update\n      setRefreshKey(prev => prev + 1);\n\n      // Call the original onBookingComplete if provided\n      if (onBookingComplete) {\n        onBookingComplete();\n      }\n    } catch (error) {\n      console.error('Error refreshing dates after booking:', error);\n    }\n  };\n\n  // Fetch available dates on mount and when refreshKey changes\n  useEffect(() => {\n    fetchAvailableDates();\n  }, [refreshKey]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center justify-center h-64\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-lg text-gray-600\",\n      children: \"Loading calendar...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center p-4 text-red-500 bg-red-50 rounded-lg\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center min-h-screen\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-4xl space-y-6\",\n      children: !showBookingForm ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-md p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-xl font-bold mb-4 text-center\",\n          children: format(selectedDate, 'MMMM yyyy')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-7 gap-2\",\n          children: [['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center font-medium text-gray-600 p-2\",\n            children: day\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this)), getDaysInMonth().map(date => {\n            const isAvailable = isDateAvailable(date);\n            const isSelected = isSameDay(date, selectedDate);\n            const isPastDate = !isAvailable;\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDateClick(date),\n              disabled: isPastDate,\n              className: `\n                  h-12 p-2 relative rounded-lg transition-colors\n                  ${isPastDate ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-white hover:bg-blue-50 cursor-pointer'}\n                  ${isSelected ? 'bg-blue-500 text-black hover:bg-blue-600' : ''}\n                  border border-gray-200\n                `,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: format(date, 'd')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 17\n              }, this), getAvailableTimesForDate(date).length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"absolute bottom-1 left-1/2 transform -translate-x-1/2\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"block h-1 w-1 rounded-full bg-green-500\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 19\n              }, this)]\n            }, date.toString(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }, this), isDateAvailable(selectedDate) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-6 space-y-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center font-medium\",\n            children: [\"Available times for \", format(selectedDate, 'MMMM d, yyyy'), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: (selectedTimeSlot === null || selectedTimeSlot === void 0 ? void 0 : selectedTimeSlot.id) || '',\n            onChange: handleTimeSelect,\n            className: \"w-full p-2 border rounded-md\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 19\n            }, this), getAvailableTimesForDate(selectedDate).map(slot => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: slot.id,\n              children: slot.displayTime\n            }, slot.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(BookingForm, {\n        selectedDate: selectedDate,\n        selectedTimeSlot: selectedTimeSlot,\n        onBookingComplete: handleBookingComplete,\n        onCancel: () => {\n          setShowBookingForm(false);\n          setSelectedTimeSlot(null);\n          if (onReturnToDashboard) {\n            onReturnToDashboard();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"Vv/EhBYc6vLuXmUqcIN5zUmGh3I=\");\n_c = Calendar;\nconst BookingForm = ({\n  selectedDate,\n  selectedTimeSlot,\n  onBookingComplete,\n  onCancel\n}) => {\n  _s2();\n  const [formData, setFormData] = useState({\n    name: '',\n    contact: '',\n    notes: ''\n  });\n  const [status, setStatus] = useState({\n    type: '',\n    message: ''\n  });\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setStatus({\n      type: '',\n      message: ''\n    });\n    try {\n      const response = await fetch('http://localhost:3000/api/appointments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          ...formData,\n          date: format(selectedDate, 'yyyy-MM-dd'),\n          timeSlot: selectedTimeSlot.id\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setStatus({\n          type: 'success',\n          message: 'Appointment booked successfully!'\n        });\n        setTimeout(onBookingComplete, 2000);\n      } else {\n        setStatus({\n          type: 'error',\n          message: data.error || 'Booking failed'\n        });\n      }\n    } catch (error) {\n      setStatus({\n        type: 'error',\n        message: 'An error occurred'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white rounded-lg shadow-md p-6\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"space-y-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xl font-bold mb-6\",\n        children: [\"Book Appointment\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm font-normal text-gray-600\",\n          children: [format(selectedDate, 'MMMM d, yyyy'), \" at \", selectedTimeSlot.time]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), status.message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `p-3 rounded-lg ${status.type === 'error' ? 'bg-red-50 text-red-600' : 'bg-green-50 text-green-600'}`,\n        children: status.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-sm font-medium\",\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"w-full p-2 border rounded-md\",\n          value: formData.name,\n          onChange: e => setFormData({\n            ...formData,\n            name: e.target.value\n          }),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-sm font-medium\",\n          children: \"Contact Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"tel\",\n          className: \"w-full p-2 border rounded-md\",\n          value: formData.contact,\n          onChange: e => setFormData({\n            ...formData,\n            contact: e.target.value\n          }),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-sm font-medium\",\n          children: \"Notes (Optional)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"w-full p-2 border rounded-md\",\n          rows: \"3\",\n          value: formData.notes,\n          onChange: e => setFormData({\n            ...formData,\n            notes: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"bg-gray-400 text-white px-4 py-2 rounded-md hover:bg-gray-500 transition-colors\",\n          onClick: onCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors\",\n          children: \"Confirm Booking\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 5\n  }, this);\n};\n_s2(BookingForm, \"l2lcTCOuGJMU0DEoPKt97pFBpLo=\");\n_c2 = BookingForm;\nexport { Calendar, BookingForm };\nvar _c, _c2;\n$RefreshReg$(_c, \"Calendar\");\n$RefreshReg$(_c2, \"BookingForm\");","map":{"version":3,"names":["React","useState","useEffect","format","startOfMonth","endOfMonth","eachDayOfInterval","isSameDay","parseISO","isAfter","startOfDay","jsxDEV","_jsxDEV","Calendar","onBookingComplete","onReturnToDashboard","_s","selectedDate","setSelectedDate","Date","availableDates","setAvailableDates","selectedTimeSlot","setSelectedTimeSlot","showBookingForm","setShowBookingForm","loading","setLoading","error","setError","refreshKey","setRefreshKey","getDaysInMonth","start","end","isDateAvailable","date","today","availableTimes","getAvailableTimesForDate","length","dateStr","now","isToday","filter","slot","remainingCapacity","slotTime","time","sort","a","b","timeA","timeB","fetchAvailableDates","token","localStorage","getItem","response","fetch","headers","cache","ok","Error","status","data","json","parsedSlots","map","substring","displayTime","console","handleDateClick","handleTimeSelect","e","slotId","target","value","find","id","toString","handleBookingComplete","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","day","isAvailable","isSelected","isPastDate","onClick","disabled","onChange","BookingForm","onCancel","_c","_s2","formData","setFormData","name","contact","notes","setStatus","type","message","handleSubmit","preventDefault","method","body","JSON","stringify","timeSlot","setTimeout","onSubmit","required","rows","_c2","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/Appointment_sheduling/frontend/src/components/Appointment.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay, parseISO, isAfter, startOfDay } from 'date-fns';\r\n\r\nconst Calendar = ({ onBookingComplete, onReturnToDashboard }) => {\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [availableDates, setAvailableDates] = useState([]);\r\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(null);\r\n  const [showBookingForm, setShowBookingForm] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [refreshKey, setRefreshKey] = useState(0);\r\n\r\n  const getDaysInMonth = () => {\r\n    const start = startOfMonth(selectedDate);\r\n    const end = endOfMonth(selectedDate);\r\n    return eachDayOfInterval({ start, end });\r\n  };\r\n\r\n  const isDateAvailable = (date) => {\r\n    const today = startOfDay(new Date());\r\n    const availableTimes = getAvailableTimesForDate(date);\r\n    return (isAfter(startOfDay(date), today) || isSameDay(date, today)) && \r\n           availableTimes.length > 0;\r\n  };\r\n\r\n  const getAvailableTimesForDate = (date) => {\r\n    if (!date) return [];\r\n    \r\n    const dateStr = format(date, 'yyyy-MM-dd');\r\n    const now = new Date();\r\n    const isToday = isSameDay(date, now);\r\n    \r\n    return availableDates\r\n      .filter(slot => {\r\n        // Must be for the selected date\r\n        if (slot.date !== dateStr) return false;\r\n        \r\n        // Remove slots that are already booked (zero remaining capacity)\r\n        if (slot.remainingCapacity === 0) return false;\r\n        \r\n        // For today, must be a future time\r\n        if (isToday) {\r\n          const slotTime = parseISO(`${dateStr}T${slot.time}`);\r\n          return isAfter(slotTime, now);\r\n        }\r\n        \r\n        return true;\r\n      })\r\n      .sort((a, b) => {\r\n        const timeA = parseISO(`2000-01-01T${a.time}`);\r\n        const timeB = parseISO(`2000-01-01T${b.time}`);\r\n        return timeA - timeB;\r\n      });\r\n  };\r\n\r\n  const fetchAvailableDates = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const token = localStorage.getItem('token');\r\n      \r\n      const response = await fetch('http://localhost:3000/api/available-dates', {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        cache: 'no-store'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      const parsedSlots = data\r\n        .filter(slot => slot.remainingCapacity === 1) // Only slots with exactly 1 capacity\r\n        .map(slot => ({\r\n          ...slot,\r\n          time: slot.time.substring(0, 5),\r\n          displayTime: format(parseISO(`2000-01-01T${slot.time}`), 'h:mm a')\r\n        }));\r\n      \r\n      setAvailableDates(parsedSlots);\r\n    } catch (error) {\r\n      console.error('Error fetching dates:', error);\r\n      setError('Failed to load available dates');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDateClick = (date) => {\r\n    if (isDateAvailable(date)) {\r\n      setSelectedDate(date);\r\n      setSelectedTimeSlot(null);\r\n      setShowBookingForm(false);\r\n    }\r\n  };\r\n\r\n  const handleTimeSelect = (e) => {\r\n    const slotId = e.target.value;\r\n    \r\n    if (slotId) {\r\n      const slot = availableDates.find(slot => \r\n        slot.id.toString() === slotId.toString() && \r\n        slot.remainingCapacity > 0\r\n      );\r\n      if (slot) {\r\n        setSelectedTimeSlot(slot);\r\n        setShowBookingForm(true);\r\n      }\r\n    } else {\r\n      setSelectedTimeSlot(null);\r\n      setShowBookingForm(false);\r\n    }\r\n  };\r\n\r\n  const handleBookingComplete = async () => {\r\n    try {\r\n      // Reset form state\r\n      setSelectedTimeSlot(null);\r\n      setShowBookingForm(false);\r\n      \r\n      // Force a refresh of available dates\r\n      await fetchAvailableDates();\r\n      \r\n      // Increment refresh key to force component update\r\n      setRefreshKey(prev => prev + 1);\r\n      \r\n      // Call the original onBookingComplete if provided\r\n      if (onBookingComplete) {\r\n        onBookingComplete();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error refreshing dates after booking:', error);\r\n    }\r\n  };\r\n\r\n  // Fetch available dates on mount and when refreshKey changes\r\n  useEffect(() => {\r\n    fetchAvailableDates();\r\n  }, [refreshKey]);\r\n\r\n  if (loading) return <div className=\"flex items-center justify-center h-64\">\r\n    <div className=\"text-lg text-gray-600\">Loading calendar...</div>\r\n  </div>;\r\n\r\n  if (error) return <div className=\"text-center p-4 text-red-500 bg-red-50 rounded-lg\">{error}</div>;\r\n\r\n  return (\r\n    <div className=\"flex justify-center min-h-screen\">\r\n      <div className=\"w-full max-w-4xl space-y-6\">\r\n        {!showBookingForm ? (\r\n          <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n            <div className=\"text-xl font-bold mb-4 text-center\">\r\n              {format(selectedDate, 'MMMM yyyy')}\r\n            </div>\r\n        \r\n        <div className=\"grid grid-cols-7 gap-2\">\r\n          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\r\n            <div key={day} className=\"text-center font-medium text-gray-600 p-2\">\r\n              {day}\r\n            </div>\r\n          ))}\r\n          \r\n          {getDaysInMonth().map((date) => {\r\n            const isAvailable = isDateAvailable(date);\r\n            const isSelected = isSameDay(date, selectedDate);\r\n            const isPastDate = !isAvailable;\r\n            \r\n            return (\r\n              <button\r\n                key={date.toString()}\r\n                onClick={() => handleDateClick(date)}\r\n                disabled={isPastDate}\r\n                className={`\r\n                  h-12 p-2 relative rounded-lg transition-colors\r\n                  ${isPastDate ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-white hover:bg-blue-50 cursor-pointer'}\r\n                  ${isSelected ? 'bg-blue-500 text-black hover:bg-blue-600' : ''}\r\n                  border border-gray-200\r\n                `}\r\n              >\r\n                <span>{format(date, 'd')}</span>\r\n                {getAvailableTimesForDate(date).length > 0 && (\r\n                  <span className=\"absolute bottom-1 left-1/2 transform -translate-x-1/2\">\r\n                    <span className=\"block h-1 w-1 rounded-full bg-green-500\"/>\r\n                  </span>\r\n                )}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {isDateAvailable(selectedDate) && (\r\n              <div className=\"mt-6 space-y-4\">\r\n                <div className=\"text-center font-medium\">\r\n                  Available times for {format(selectedDate, 'MMMM d, yyyy')}:\r\n                </div>\r\n                <select\r\n                  value={selectedTimeSlot?.id || ''}\r\n                  onChange={handleTimeSelect}\r\n                  className=\"w-full p-2 border rounded-md\"\r\n                >\r\n                  <option value=\"\">Select a time</option>\r\n                  {getAvailableTimesForDate(selectedDate).map((slot) => (\r\n                    <option key={slot.id} value={slot.id}>\r\n                      {slot.displayTime}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            )}\r\n         </div>\r\n        ) : (\r\n          <BookingForm\r\n            selectedDate={selectedDate}\r\n            selectedTimeSlot={selectedTimeSlot}\r\n            onBookingComplete={handleBookingComplete}\r\n            onCancel={() => {\r\n              setShowBookingForm(false);\r\n              setSelectedTimeSlot(null);\r\n              if (onReturnToDashboard) {\r\n                onReturnToDashboard();\r\n              }\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst BookingForm = ({ selectedDate, selectedTimeSlot, onBookingComplete, onCancel }) => {\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    contact: '',\r\n    notes: ''\r\n  });\r\n  const [status, setStatus] = useState({ type: '', message: '' });\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setStatus({ type: '', message: '' });\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:3000/api/appointments', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n        },\r\n        body: JSON.stringify({\r\n          ...formData,\r\n          date: format(selectedDate, 'yyyy-MM-dd'),\r\n          timeSlot: selectedTimeSlot.id\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setStatus({ type: 'success', message: 'Appointment booked successfully!' });\r\n        setTimeout(onBookingComplete, 2000);\r\n      } else {\r\n        setStatus({ type: 'error', message: data.error || 'Booking failed' });\r\n      }\r\n    } catch (error) {\r\n      setStatus({ type: 'error', message: 'An error occurred' });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-md p-6\">\r\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n        <div className=\"text-xl font-bold mb-6\">\r\n          Book Appointment\r\n          <div className=\"text-sm font-normal text-gray-600\">\r\n            {format(selectedDate, 'MMMM d, yyyy')} at {selectedTimeSlot.time}\r\n          </div>\r\n        </div>\r\n\r\n        {status.message && (\r\n          <div className={`p-3 rounded-lg ${\r\n            status.type === 'error' ? 'bg-red-50 text-red-600' : 'bg-green-50 text-green-600'\r\n          }`}>\r\n            {status.message}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"space-y-2\">\r\n          <label className=\"block text-sm font-medium\">Name</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"w-full p-2 border rounded-md\"\r\n            value={formData.name}\r\n            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          <label className=\"block text-sm font-medium\">Contact Number</label>\r\n          <input\r\n            type=\"tel\"\r\n            className=\"w-full p-2 border rounded-md\"\r\n            value={formData.contact}\r\n            onChange={(e) => setFormData({ ...formData, contact: e.target.value })}\r\n            required\r\n          />\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          <label className=\"block text-sm font-medium\">Notes (Optional)</label>\r\n          <textarea\r\n            className=\"w-full p-2 border rounded-md\"\r\n            rows=\"3\"\r\n            value={formData.notes}\r\n            onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"flex justify-between\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"bg-gray-400 text-white px-4 py-2 rounded-md hover:bg-gray-500 transition-colors\"\r\n            onClick={onCancel}\r\n          >\r\n            Cancel\r\n          </button>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            className=\"bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors\"\r\n          >\r\n            Confirm Booking\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Calendar, BookingForm };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}